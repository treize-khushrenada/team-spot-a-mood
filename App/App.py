import streamlit as st
from st_aggrid import AgGrid, GridUpdateMode
from st_aggrid.grid_options_builder import GridOptionsBuilder

import joblib
import pickle
import os

import pandas as pd
import numpy as np

from PIL import Image
from sentence_transformers import SentenceTransformer, util

import songs_rec
path = os.path.dirname(__file__)

@st.cache(show_spinner=False)
def load_embeddings():
    with open(path + '/pickle_objects/embeddings.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

@st.cache(show_spinner=False)
def load_arr_song_idx():
    with open(path + '/pickle_objects/arr_song_idx.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

@st.cache(show_spinner=False)
def load_arr_lyrics_idx():
    with open(path + '/pickle_objects/arr_lyrics_idx.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

@st.cache(show_spinner=False)
def load_sample_artists_set():
    with open(path + '/pickle_objects/sample_song_lyrics_set.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj[0]

def load_model(model_name = "all-distilroberta-v1"):
    model = SentenceTransformer(model_name)
    return model

#load default model and empty dataframe
model = load_model()
df_results = pd.DataFrame()

# Sidebar
st.sidebar.header('About This App')
st.sidebar.markdown('Use this tool to search for specific lyrics lines that match the meaning of your text or image input!\
                    Simply hit enter after you enter the text, or upload an image(an experimental function) to get started.<br><br>\
                    Our library contains information of 1000 "billboard top 100" songs at the moment.\
                    You can also refine the search scope by specifying a range of happiness level with the slider tool.<br><br>\
                    Recommendation is performed by a semantic textual similarity algorithm based on word embeddings generated by pretrained and fine-tuned BERT models.\
                    Please refer to other pages for more details.', unsafe_allow_html=True)

# Main body
## Project title 
st.title('Spot-A-Mood Playlist Recommendation')

## Text query
text_input = st.text_input("What's on your mind? (Press Enter to get results)", placeholder="What's on your mind?", key="txt")

## Image upload
with st.form("input_form", clear_on_submit=True):
        image_input = st.file_uploader("Or upload an image (experimental)", type=['.png','jpg'], accept_multiple_files=False, key="img")
        submitted = st.form_submit_button("Upload")

## valence_range
valence_range = st.slider('Choose your happiness level',0, 10, (0, 10))
valence_min = valence_range[0]/10
valence_max = valence_range[1]/10

def load_results_img(query):
    embeddings = load_embeddings()
    arr_song_idx = load_arr_song_idx()
    arr_lyrics_idx = load_arr_lyrics_idx()
    sample_artists_set = load_sample_artists_set()
    results = songs_rec.main(query, embeddings, sample_artists_set, arr_lyrics_idx, arr_song_idx, [valence_min, valence_max], model)
    df = pd.DataFrame(results)
    df_results = df[['song title', 'artist', 'song_score']]
    return df, df_results


def load_results_txt(query):
    embeddings = load_embeddings()
    arr_song_idx = load_arr_song_idx()
    arr_lyrics_idx = load_arr_lyrics_idx()
    sample_artists_set = load_sample_artists_set()
    results = songs_rec.main(query, embeddings, sample_artists_set, arr_lyrics_idx, arr_song_idx, [valence_min, valence_max], model)
    df = pd.DataFrame(results)
    df_results = df[['song title', 'artist', 'song_score']]
    return df, df_results

## embeddings generation + semantic searching
if submitted and image_input is not None:
    if text_input not in ["", None]:
        text_input = None
    query = Image.open(image_input)
    model = load_model("clip-ViT-B-32")
    df, df_results = load_results_img(query)
    
if text_input not in ["", None]:
    query =  text_input
    df, df_results = load_results_txt(query)
            
## Reminder
st.markdown('It might take a few moments to generate results for the first run.')

# Songs recommendation list
with st.container():
    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader('Songs')

        gd = GridOptionsBuilder.from_dataframe(df_results)
        gd.configure_selection(selection_mode='single', pre_selected_rows=[0], use_checkbox=False)
        gridoptions = gd.build()

        grid_table = AgGrid(df_results, height=400, width=100, gridOptions=gridoptions, fit_columns_on_grid_load=True,  reload_data = False, theme = 'streamlit')
    with col2:
        st.subheader('Lyrics')
        selected_row = grid_table["selected_rows"]
        if selected_row is not None:
            
            try:
                selected_row_index = selected_row[0]['_selectedRowNodeInfo']['nodeRowIndex']
                dic_lyrics_results = df['lyrics_scores'].iloc[int(selected_row_index)]
                for key in dic_lyrics_results.keys():
                    original_title = '<p style="font-size: {0}px;">{1}</p>'.format(str(48*float(dic_lyrics_results[key])), key)
                    st.markdown(original_title, unsafe_allow_html=True)
            except:

                pass

# Mood range
#mood_range = range(0,11)
#mood_number = st.sidebar.select_slider('Choose your happiness level',
    #options=mood_range, value=5)
#st.sidebar.write('Mood Level:', mood_number*':smile:')



# SBERT Sentence Transformer
# model = SentenceTransformer('all-MiniLM-L6-v2')
# embeddings = model.encode(query)
# with st.expander("Click to See Query Vector"):
#     st.write(embeddings)

# Query embedding inside the song cluster visualization
# sample pic
# image = Image.open('assets/Clustering.png')
# st.image(image, caption='Query embedding inside the songs clusters')