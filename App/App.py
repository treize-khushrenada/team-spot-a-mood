import streamlit as st
from st_aggrid import AgGrid, GridUpdateMode
from st_aggrid.grid_options_builder import GridOptionsBuilder

import joblib
import pickle
import os

import pandas as pd
import numpy as np

from PIL import Image
from sentence_transformers import SentenceTransformer, util

import songs_rec
path = os.path.dirname(__file__)

@st.cache
def load_embeddings():
    with open(path + '/pickle_objects/embeddings.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

@st.cache
def load_arr_song_idx():
    with open(path + '/pickle_objects/arr_song_idx.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

@st.cache
def load_arr_lyrics_idx():
    with open(path + '/pickle_objects/arr_lyrics_idx.pickle', 'rb') as f:
        obj = pickle.load(f)
    return obj

#@st.cache
def load_model(model_name = "all-distilroberta-v1"):
    model = SentenceTransformer(model_name)
    return model

# Main body

## Project title 
st.title('Spot-A-Mood Playlist Recommendation')

## Text query
text_input = st.text_input('Hit ENTER to get results', placeholder="What's on your mind?")
query = text_input

## Image upload
image_input = st.file_uploader("Or upload an image", type=['.png','jpg'], accept_multiple_files=False)

## valence_range
valence_range = st.slider('Choose your happiness level',0, 10, (0, 10))

## embeddings generation + semantic searching
if image_input is not None:
    st.sidebar.image(image_input, caption='uploaded image')
if text_input is not None:
    with open(path + '/pickle_objects/sample_song_lyrics_set.pickle', 'rb') as f:
        l_pickle = pickle.load(f)

    sample_artists_set = l_pickle[0]
    lyrics_set = l_pickle[1]

    embeddings = load_embeddings()
    arr_song_idx = load_arr_song_idx()
    arr_lyrics_idx = load_arr_lyrics_idx()

    valence_min = valence_range[0]/10
    valence_max = valence_range[1]/10

    model = load_model()
            
    results = songs_rec.main(text_input, embeddings, sample_artists_set, arr_lyrics_idx, arr_song_idx, [valence_min, valence_max], model)

    df = pd.DataFrame(results)
    df_results = df[['song title', 'artist', 'song_score']]

## Reminder
st.markdown('It might take a few moments to generate results for the first run.')

# Songs recommendation list
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader('Songs Recommendation')

    gd = GridOptionsBuilder.from_dataframe(df_results)
    gd.configure_selection(selection_mode='single', pre_selected_rows=[0], use_checkbox=False)
    gridoptions = gd.build()

    grid_table = AgGrid(df_results, height=400, width=100, gridOptions=gridoptions, update_mode=GridUpdateMode.SELECTION_CHANGED, fit_columns_on_grid_load=True)
with col2:
    st.subheader('Relevant Lyrics')
    selected_row = grid_table["selected_rows"]
    if selected_row is not None:
        
        try:
            selected_row_index = selected_row[0]['_selectedRowNodeInfo']['nodeRowIndex']
            dic_lyrics_results = df['lyrics_scores'].iloc[int(selected_row_index)]
            for key in dic_lyrics_results.keys():
                original_title = '<p style="font-size: {0}px;">{1}</p>'.format(str(48*float(dic_lyrics_results[key])), key)
                st.markdown(original_title, unsafe_allow_html=True)
        except:

            pass


# Sidebar
st.sidebar.header('About This App')
st.sidebar.markdown('You can adjust your mood and text query below to receive out playlist')
st.sidebar.markdown('Use this tool to search for specific lyrics lines that match the meaning of your text or image input!\n\
                    Simply hit enter after you enter the text, or upload an image to get started.\n\
                    Our library contains information of 1000 "billboard top 100" songs at the moment.\n\
                    You can also refine the search scope by specifying a range of happiness level with the slider tool.\n\
                    Recommendation is performed by a semantic textual similarity algorithm based on word embeddings generated by pretrained and fine-tuned BERT models.\n\
                    Please refer to other pages for more details.')


# Mood range
#mood_range = range(0,11)
#mood_number = st.sidebar.select_slider('Choose your happiness level',
    #options=mood_range, value=5)
#st.sidebar.write('Mood Level:', mood_number*':smile:')



# SBERT Sentence Transformer
# model = SentenceTransformer('all-MiniLM-L6-v2')
# embeddings = model.encode(query)
# with st.expander("Click to See Query Vector"):
#     st.write(embeddings)

# Query embedding inside the song cluster visualization
# sample pic
# image = Image.open('assets/Clustering.png')
# st.image(image, caption='Query embedding inside the songs clusters')